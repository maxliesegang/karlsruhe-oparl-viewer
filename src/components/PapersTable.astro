---
import type { Paper } from "../shared/types/paper";

interface Props {
  papers: Paper[];
}

const { papers = [] } = Astro.props;

const formatDate = (dateString: string | undefined): string => {
  if (!dateString) return "";
  const date = new Date(dateString);
  return new Intl.DateTimeFormat("de-DE", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  }).format(date);
};
---

{
  papers.length > 0 ? (
    <div class="table-wrapper">
      <table>
        <thead>
          <tr>
            <th>Aktenzeichen</th>
            <th>Titel</th>
            <th style="width: fit-content;">Letzte Änderung</th>
            <th>Art</th>
          </tr>
        </thead>
        <tbody>
          {papers.map((paper) => (
            <tr
              class="clickable"
              id={paper.internalReference}
              style="cursor: pointer;"
            >
              <td data-label="Vorlage">{paper.reference}</td>
              <td data-label="Titel">{paper.name}</td>
              <td data-label="Letzte Änderung">{formatDate(paper.modified)}</td>
              <td data-label="Art">{paper.paperType}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  ) : (
    <p>Loading data or no papers available...</p>
  )
}

<style>
  /* Base styling for table wrapper */
  .table-wrapper {
    width: 100%;
    overflow-x: auto; /* Horizontal scroll for small screens */
    margin: 20px auto;
  }

  table {
    min-width: 600px;
    border-collapse: collapse;
    font-family: Arial, sans-serif;
    color: #222;
    margin: 0 auto;
    background-color: #fff;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    overflow: hidden;
  }

  thead {
    background-color: #f1f3f4;
  }

  thead th {
    text-align: left;
    padding: 15px;
    font-weight: bold;
    color: #000;
    border-bottom: 2px solid #ddd;
    cursor: pointer;
    text-transform: uppercase;
    font-size: 0.95rem;
  }

  tbody tr:nth-child(odd) {
    background-color: #fdfdfd;
  }

  tbody tr:nth-child(even) {
    background-color: #fff;
  }

  tbody tr:hover {
    background-color: #e9ecef;
    transition: background-color 0.2s ease;
  }

  td {
    padding: 12px 15px;
    border-bottom: 1px solid #ddd;
    color: #222;
    font-size: 0.95rem;
  }

  th,
  td {
    border-right: 1px solid #eee;
  }

  th:last-child,
  td:last-child {
    border-right: none;
  }

  p {
    color: #444;
    font-style: italic;
    margin: 20px 0;
    text-align: center;
  }

  /* Mobile responsiveness: Add card style for rows */
  @media screen and (max-width: 768px) {
    .table-wrapper {
      overflow-x: auto;
    }

    table {
      border: 0;
      min-width: 100%; /* Auto-adjust for smaller viewports */
    }

    thead {
      display: none; /* Hide table headers for smaller screens */
    }

    tbody tr {
      display: block;
      margin-bottom: 20px; /* Add separation between rows */
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Subtle shadow */
      background-color: #f9f9f9;
      padding: 10px;
    }

    tbody td {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      font-size: 0.9rem;
      border: none; /* Remove row inner borders */
      border-bottom: 1px solid #eee; /* Easy-to-follow cell separation */
    }

    tbody td:last-child {
      border-bottom: none;
    }

    tbody td:before {
      content: attr(data-label); /* Dynamically add column headers */
      font-weight: bold;
      text-transform: uppercase;
      color: #555;
      flex: 1; /* Consistent alignment */
    }
  }
</style>

<script>
  const buttons = document.querySelectorAll("tr.clickable");

  buttons.forEach((button) => {
    button.addEventListener("click", (event: Event) => {
      const parent = (event.target as HTMLElement)
        ?.parentElement as HTMLElement;

      window.location.href = `vorlage/${parent.id}`;
    });
  });
</script>
